from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

class Registration(StatesGroup):
    language = State()
    phone = State()
    code = State()
    account_type = State()

async def start_cmd(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BuildBot IL!\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", 
                         reply_markup=types.ReplyKeyboardRemove())
    await message.answer("Please choose language:", 
                         reply_markup=get_language_keyboard())
    await Registration.language.set()

async def language_chosen(callback: types.CallbackQuery, state: FSMContext):
    lang = callback.data.split(":")[1]
    await state.update_data(language=lang)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +972501234567:")
    await Registration.phone.set()

async def phone_received(message: types.Message, state: FSMContext):
    phone = message.text
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if not phone.startswith("+972") or len(phone) != 13:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +972501234567")
    
    await state.update_data(phone=phone)
    await message.answer("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: 123456")  # –î–ª—è —Ç–µ—Å—Ç–∞
    await Registration.code.set()

async def code_received(message: types.Message, state: FSMContext):
    if message.text != "123456":
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=get_account_type_keyboard())
    await Registration.account_type.set()

async def account_type_chosen(callback: types.CallbackQuery, state: FSMContext):
    account_type = callback.data.split(":")[1]
    data = await state.get_data()
    await callback.message.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                 f"–Ø–∑—ã–∫: {data['language']}\n"
                                 f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
                                 f"–¢–∏–ø: {account_type}")
    await state.finish()

def get_language_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang:ru"),
        types.InlineKeyboardButton("üá¨üáß English", callback_data="lang:en"),
        types.InlineKeyboardButton("üáÆüá± ◊¢◊ë◊®◊ô◊™", callback_data="lang:he")
    )
    return keyboard

def get_account_type_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ó–∞–∫–∞–∑—á–∏–∫", callback_data="type:customer"))
    keyboard.add(types.InlineKeyboardButton("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", callback_data="type:performer"))
    keyboard.add(types.InlineKeyboardButton("–ë—Ä–∏–≥–∞–¥–∞", callback_data="type:team"))
    return keyboard

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_cmd, commands=["start"])
    dp.register_callback_query_handler(language_chosen, lambda c: c.data.startswith("lang:"), state=Registration.language)
    dp.register_message_handler(phone_received, state=Registration.phone)
    dp.register_message_handler(code_received, state=Registration.code)
    dp.register_callback_query_handler(account_type_chosen, lambda c: c.data.startswith("type:"), state=Registration.account_type)
